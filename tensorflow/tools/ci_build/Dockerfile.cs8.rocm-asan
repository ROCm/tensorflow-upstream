# This Dockerfile provides a starting point for a ROCm installation of 
# MIOpen and tensorflow.  
FROM almalinux:8
MAINTAINER Jeff Poznanovic <jeffrey.poznanovic@amd.com>

ARG RPM_ROCM_REPO=https://compute-artifactory.amd.com/artifactory/list/rocm-osdb-rhel-8.x/compute-rocm-dkms-no-npi-hipclang-14671/
ARG ROCM_PATH=/opt/rocm-6.3.0-14671/
ARG GPU_DEVICE_TARGETS="gfx942:xnack+"

ENV ROCM_PATH=$ROCM_PATH
ENV DEBIAN_FRONTEND noninteractive
ENV TF_NEED_ROCM 1
ENV HOME /root/
RUN dnf update -y && dnf install -y epel-release && dnf install -y elrepo-release && dnf config-manager --set-enabled powertools
# Setup the build_system repo
RUN echo -e "[build_system]\nname=ROCm\nbaseurl=https://repo.almalinux.org/build_system/8/x86_64/\nenabled=1\ngpgcheck=0" >/etc/yum.repos.d/build_system.repo
RUN dnf group install -y "Development Tools"

RUN bin/bash -c 'echo -e "[ROCm]\nname=ROCm\nbaseurl=$RPM_ROCM_REPO\nenabled=1\ngpgcheck=0" >>/etc/yum.repos.d/rocm.repo'
RUN bin/bash -c 'echo -e "[amdgpu]\nname=amdgpu\nbaseurl=https://repo.radeon.com/amdgpu/latest/rhel/8.8/main/x86_64/\nenabled=1\ngpgcheck=0" >>/etc/yum.repos.d/amdgpu.repo'

RUN dnf clean all
RUN dnf update -y

# Install misc pkgs
RUN dnf --enablerepo=extras,epel,elrepo,powertools,build_system  install -y \
  epel-release \
  openssl-devel  \
  libffi-devel  \
  hdf5-devel \
  python38-devel \
  python38 \
  python38-pip \
  wget \
  make \
  patch \
  zlib-devel \
  bzip2 \
  bzip2-devel \
  readline \
  readline-devel \
  sqlite \
  sqlite-devel \
  openssl-devel \
  tk-devel \
  xz-devel

RUN dnf --enablerepo=extras,epel,elrepo,powertools,build_system  install -y \
  bc \
  bridge-utils \
  cmake \
  cmake3 \
  devscripts \
  dkms \
  doxygen \
  dpkg \
  dpkg-dev \
  dpkg-perl \
  elfutils-libelf-devel \
  expect \
  file \
  gettext \
  gcc-c++ \
  git \
  libgcc \
  ncurses \
  ncurses-base \
  ncurses-libs \
  numactl-devel \
  numactl-libs \
  libssh \
  libunwind-devel \
  libunwind \
  llvm \
  llvm-libs \
  make \
  openssl \
  openssl-libs \
  openssh \
  openssh-clients \
  pciutils \
  pciutils-devel \
  pciutils-libs \
  java-11-openjdk-devel \
  patchelf\
  pkgconfig \
  npth \
  qemu-kvm \
  re2c \
  rpm \
  rpm-build \
  subversion \
  sudo \
  wget\
  kernel-devel-uname-r

RUN dnf --enablerepo=extras,build_system  install -y \
  libdrm-amdgpu \
  rocm-dev \
  rocm-ml-sdk-asan \
  rocm-ml-sdk \
  miopen-hip  \
  miopen-hip-devel  \
  rocblas  \
  rocblas-devel  \
  rocsolver-devel  \
  rocrand-devel  \
  rocfft-devel  \
  hipfft-devel  \
  hipblas-devel  \
  rocprim-devel  \
  hipcub-devel  \
  rccl-devel  \
  hipsparse-devel  \
  hipsolver-devel


ENV OPENCL_ROOT=$ROCM_PATH/opencl
ENV PATH="$ROCM_PATH/bin:${PATH}"
ENV PATH="$OPENCL_ROOT/bin:${PATH}"

# Workaround, explicitly add symbolic link to /opt/rocm
RUN touch ${ROCM_PATH}/.info/version
RUN bash -c 'ln -s ${ROCM_PATH} /opt/rocm'

# Add target file to help determine which device(s) to build for
RUN bash -c 'echo -e "gfx942:xnack+\n" >> ${ROCM_PATH}/bin/target.lst'

# Setup environment variables, and add those environment variables at the end of ~/.bashrc 
ARG PATH=$HCC_HOME/bin:$HIP_PATH/bin:$PATH

# Copy and run the install scripts.
COPY install/*.sh /install/
ARG DEBIAN_FRONTEND=noninteractive

RUN /install/install_pip_packages.sh
RUN /install/install_bazel.sh
RUN /install/install_golang.sh
RUN ln -sf /usr/bin/python3.8 /usr/bin/python3
RUN ln -sf /usr/bin/python3 /usr/bin/python
RUN pip install cmake joblib wheel

# Set up the master bazelrc configuration file.
COPY install/.bazelrc /etc/bazel.bazelrc

# Configure the build for our CUDA configuration.
ENV TF_NEED_ROCM 1

# This is a temporary workaround to fix Out-Of-Memory errors we are running into with XLA perf tests
# By default, HIP runtime "hides" 256MB from the TF Runtime, but with recent changes (update to ROCm2.3, dynamic loading of roc* libs, et al)
# it seems that we need to up the threshold slightly to 320MB
ENV HIP_HIDDEN_FREE_MEM=320
ENV LD_LIBRARY_PATH=/opt/rocm-6.3.0-14671/lib/asan/:/opt/rocm-6.3.0-14671/lib/llvm/lib/clang/18/lib/linux/
ENV HSA_XNACK=1

# This Dockerfile provides a starting point for a ROCm installation of 
# MIOpen and tensorflow.

# This Dockerfile uses a multi-stage build
# The first stage is to build the HCC, HIP and other tools we need for the TF build
# The second stage is to do the TF CI build itself
# The separation of stages allows to reduce the size of the final docker image
# by copying over only the packages built in the first stage over to the second one


###################################################
# Stage 1 : build the tools needed for the TF build
###################################################

FROM rocm/rocm-terminal:1.8.2 as tool_builder

ENV DEBIAN_FRONTEND noninteractive
ENV HOME /home/rocm-user

# install packages needed for this image
RUN sudo apt-get update && sudo apt-get install -y rpm git mercurial libxml2 libxml2-dev 

# Workaround : build HCC from source using the commit that is known to have fix for issue812
RUN cd $HOME && git clone --recursive https://github.com/RadeonOpenCompute/hcc.git
RUN cd $HOME/hcc  && git checkout -b issue812-fix d530be7
RUN cd $HOME/hcc && mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release .. && sudo make package -j$(nproc) && sudo dpkg -i *.deb

# Workaround: build HIP from source using fork that holds roc-1.8.x with the alternate fix for HIP PR 457
RUN cd $HOME && git clone -b roc-1.8.x-pr457-altfix https://github.com/deven-amd/HIP.git
RUN cd $HOME/HIP && mkdir build && cd build && cmake .. && sudo make package -j$(nproc) && sudo dpkg -i *.deb

# Workaround : build MIOpen from source using fork of the public repo with the temporary fix for issue #1061 ($HOME env not set)
RUN sudo apt-get install -y wget unzip libssl-dev libboost-dev libboost-system-dev libboost-filesystem-dev

RUN cd $HOME && git clone https://github.com/RadeonOpenCompute/rocm-cmake.git
RUN cd $HOME/rocm-cmake && mkdir build && cd build && cmake .. && sudo make package -j$(nproc) && sudo dpkg -i ./rocm-cmake*.deb

RUN cd $HOME && git clone https://github.com/ROCmSoftwarePlatform/MIOpenGEMM.git
RUN cd $HOME/MIOpenGEMM && mkdir build && cd build && cmake .. && sudo make package -j$(nproc) && sudo dpkg -i ./miopengemm*.deb

RUN cd $HOME && mkdir half && cd half && sudo wget https://downloads.sourceforge.net/project/half/half/1.12.0/half-1.12.0.zip && sudo unzip *.zip

RUN cd $HOME && git clone -b pr1061-fix https://github.com/deven-amd/MIOpen.git
RUN cd $HOME/MIOpen && mkdir build && cd build && \
  CXX=/opt/rocm/bin/hcc cmake \
    -DMIOPEN_BACKEND=HIP \
    -DCMAKE_PREFIX_PATH="/opt/rocm/hcc;/opt/rocm/hip" \
    -DCMAKE_CXX_FLAGS="-isystem /usr/include/x86_64-linux-gnu/" \
    -DHALF_INCLUDE_DIR=$HOME/half/include \
    -DCMAKE_BUILD_TYPE=Release \
    .. && sudo make package -j$(nproc)



###########################
# Stage 2 : do the TF build
###########################

FROM ubuntu:xenial
MAINTAINER Jeff Poznanovic <jeffrey.poznanovic@amd.com>

ARG DEB_ROCM_REPO=http://repo.radeon.com/rocm/apt/debian/
ARG ROCM_PATH=/opt/rocm

ENV DEBIAN_FRONTEND noninteractive
ENV TF_NEED_ROCM 1
ENV HOME /root/
RUN apt update && apt install -y wget software-properties-common 

# Add rocm repository
RUN apt-get clean all
RUN wget -qO - $DEB_ROCM_REPO/rocm.gpg.key | apt-key add -
RUN sh -c  "echo deb [arch=amd64] $DEB_ROCM_REPO xenial main > /etc/apt/sources.list.d/rocm.list"

# Install misc pkgs
RUN apt-get update --allow-insecure-repositories && DEBIAN_FRONTEND=noninteractive apt-get install -y \
  build-essential \
  clang-3.8 \
  clang-format-3.8 \
  clang-tidy-3.8 \
  cmake \
  cmake-qt-gui \
  ssh \
  curl \
  git \
  libcurl3-dev \
  libfreetype6-dev \
  libhdf5-serial-dev \
  libpng12-dev \
  libzmq3-dev \
  pkg-config \
  python-dev \
  rsync \
  software-properties-common \
  unzip \
  zip \
  zlib1g-dev \
  apt-utils \
  pkg-config \
  g++-multilib \
  libunwind-dev \
  libfftw3-dev \
  libelf-dev \
  libncurses5-dev \
  libpthread-stubs0-dev \
  vim \
  gfortran \
  libboost-program-options-dev \
  libssl-dev \
  libboost-dev \
  libboost-system-dev \
  libboost-filesystem-dev \
  rpm \
  libnuma-dev \
  pciutils \
  virtualenv \
  libxml2 \
  libxml2-dev \
  wget && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/*

# Install rocm pkgs
RUN apt-get update --allow-insecure-repositories && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-unauthenticated \
    rocm-dev rocm-libs rocm-utils \
    rocfft miopen-hip miopengemm rocblas hipblas rocrand \
    rocm-profiler cxlactivitylogger && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# COPY and install the hcc package built in the previous stage
RUN mkdir -p $HOME/pkgs/hcc
COPY --from=tool_builder /home/rocm-user/hcc/build/*.deb $HOME/pkgs/hcc/
RUN cd $HOME/pkgs/hcc && dpkg -i *.deb

# COPY and install the HIP package built in the previous stage
RUN mkdir -p $HOME/pkgs/HIP
COPY --from=tool_builder /home/rocm-user/HIP/build/*.deb $HOME/pkgs/HIP/
RUN cd $HOME/pkgs/HIP && dpkg -i *.deb

# COPY and install the MIOpen package built in the previous stage
RUN mkdir -p $HOME/pkgs/MIOpen
COPY --from=tool_builder /home/rocm-user/MIOpen/build/*.deb $HOME/pkgs/MIOpen/
RUN cd $HOME/pkgs/MIOpen && dpkg -i *.deb

ENV HCC_HOME=$ROCM_PATH/hcc
ENV HIP_PATH=$ROCM_PATH/hip
ENV OPENCL_ROOT=$ROCM_PATH/opencl
ENV PATH="$HCC_HOME/bin:$HIP_PATH/bin:${PATH}"
ENV PATH="$ROCM_PATH/bin:${PATH}"
ENV PATH="$OPENCL_ROOT/bin:${PATH}"

# Add target file to help determine which device(s) to build for
RUN echo -e "gfx803\ngfx900" >> /opt/rocm/bin/target.lst

# Setup environment variables, and add those environment variables at the end of ~/.bashrc 
ARG HCC_HOME=/opt/rocm/hcc
ARG HIP_PATH=/opt/rocm/hip
ARG PATH=$HCC_HOME/bin:$HIP_PATH/bin:$PATH

RUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py && \
    python get-pip.py && \
    rm get-pip.py

RUN pip --no-cache-dir install \
        Pillow \
        h5py \
        ipykernel \
        jupyter \
        keras_applications==1.0.4 \
        keras_preprocessing==1.0.2 \ 
        matplotlib \
        mock \
        numpy==1.14.5 \ 
        scipy \
        sklearn \
        pandas \
        && \
    python -m ipykernel.kernelspec

# RUN ln -s -f /usr/bin/python3 /usr/bin/python#

# Set up Bazel.

# Running bazel inside a `docker build` command causes trouble, cf:
#   https://github.com/bazelbuild/bazel/issues/134
# The easiest solution is to set up a bazelrc file forcing --batch.
RUN echo "startup --batch" >>/etc/bazel.bazelrc
# Similarly, we need to workaround sandboxing issues:
#   https://github.com/bazelbuild/bazel/issues/418
RUN echo "build --spawn_strategy=standalone --genrule_strategy=standalone" \
    >>/etc/bazel.bazelrc
# Install the most recent bazel release.
ENV BAZEL_VERSION 0.15.0
WORKDIR /
RUN mkdir /bazel && \
    cd /bazel && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \
    chmod +x bazel-*.sh && \
    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    cd / && \
    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh

# Download and build TensorFlow.
WORKDIR /tensorflow-upstream
RUN git clone --branch=.* --depth=1 https://github.com/ROCmSoftwarePlatform/tensorflow-upstream.git .

# Set up the master bazelrc configuration file.
RUN cp tensorflow/tools/ci_build/install/.bazelrc /etc/bazel.bazelrc

# Configure the build for our ROCM configuration.
ENV TF_NEED_ROCM 1
ENV CI_BUILD_PYTHON=python

RUN tensorflow/tools/ci_build/builds/configured ROCM \
    bazel build -c opt --config=rocm \
        tensorflow/tools/pip_package:build_pip_package
RUN bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip && \
    pip --no-cache-dir install --upgrade /tmp/pip/tensorflow-*.whl && \
    rm -rf /tmp/pip && \
    rm -rf /root/.cache
# Clean up pip wheel and Bazel cache when done.

WORKDIR /root

